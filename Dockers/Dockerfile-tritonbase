FROM nvcr.io/nvidia/tritonserver:22.02-py3

LABEL description="Ubuntu 20.04 with Acts dependencies and Triton Inference Server"
LABEL maintainer="Haoran Zhao <haoran.zhao@cern.ch>"
# reference: 
# https://github.com/acts-project/machines/blob/master/ubuntu2004/Dockerfile
# https://github.com/acts-project/machines/blob/master/ubuntu2004_exatrkx/Dockerfile
# https://github.com/xju2/dockers/blob/main/ML/acts-triton/Dockerfile

# increase whenever any of the RUN commands change
LABEL version="1.0"

# DEBIAN_FRONTEND ensures non-blocking operation (tzdata is a problem)
ENV DEBIAN_FRONTEND noninteractive

WORKDIR /tmp

# Update the CUDA Linux GPG Repository Key
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub 

# install dependencies from the package manager.
#
# see also https://root.cern.ch/build-prerequisites
RUN apt-get update -y \
    && apt-get install -y \
    autoconf automake build-essential ca-certificates ccache curl freeglut3-dev git git-lfs \
    libarchive-dev libb64-dev libblas-dev libboost-dev libboost-filesystem-dev libboost-program-options-dev libboost-test-dev \
    libcurl4-openssl-dev libeigen3-dev libexpat-dev libfreetype6-dev libftgl-dev libgl2ps-dev libglew-dev libgsl-dev \
    liblapack-dev liblz4-dev liblzma-dev libnuma-dev libpcre3-dev libre2-dev libssl-dev libtbb-dev libtool libx11-dev \
    libxerces-c-dev libxxhash-dev libxext-dev libxft-dev libxpm-dev libzstd-dev ninja-build patchelf pkg-config python3-dev \
    python3-numpy python3-pip python3-setuptools python3-venv rapidjson-dev rsync scons software-properties-common swig time \
    tmux tree unzip uuid-dev vim wget zlib1g-dev \
    && apt-get clean -y   

RUN ln -s /usr/bin/python3 /usr/bin/python

# manual builds for hep-specific packages
ENV GET curl --location --silent --create-dirs
ENV UNPACK_TO_SRC tar -xz --strip-components=1 --directory src
ENV PREFIX /usr/local

ENV GEANT4_VERSION=11.1.1
ENV HEPMC3_VERSION=3.2.5
ENV PYTHIA8_VERSION=309
ENV JSON_VERSION=3.11.2
ENV ROOT_VERSION=6.28.06
ENV PODIO_VERSION=00-17-02
ENV EDM4HEP_VERSION=00-10-01
ENV DD4HEP_VERSION=01-27
ENV ONNXRUNTIME_VERSION=1.13.1

ENV CUDA_ARCH=80;86
ENV triton_repo_tag=r22.02

## install cmake
ENV CMAKE_VERSION=3.23.1
RUN curl -SL https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz \
    | tar -xzC . \
    && mv cmake-* cmake \
    && rsync -rv --links cmake/ /usr/local/ && rm -rf cmake/

# Geant4
RUN mkdir src \
    && ${GET} https://gitlab.cern.ch/geant4/geant4/-/archive/v${GEANT4_VERSION}/geant4-v${GEANT4_VERSION}.tar.gz \
    | ${UNPACK_TO_SRC} \
    && cmake -B build -S src -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -DGEANT4_BUILD_TLS_MODEL=global-dynamic \
    -DGEANT4_INSTALL_DATA=OFF \
    -DGEANT4_USE_GDML=ON \
    -DGEANT4_USE_SYSTEM_EXPAT=ON \
    -DGEANT4_USE_SYSTEM_ZLIB=ON \
    && cmake --build build -- install \
    && rm -rf build src

# HepMC3
RUN mkdir src \
    && ${GET} https://hepmc.web.cern.ch/hepmc/releases/HepMC3-${HEPMC3_VERSION}.tar.gz \
    | ${UNPACK_TO_SRC} \
    && cmake -B build -S src -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -DHEPMC3_BUILD_STATIC_LIBS=OFF \
    -DHEPMC3_ENABLE_PYTHON=OFF \
    -DHEPMC3_ENABLE_ROOTIO=OFF \
    -DHEPMC3_ENABLE_SEARCH=OFF \
    && cmake --build build -- install \
    && rm -rf build src

# Pythia8
# requires rsync; installation uses `rsync` instead of `install`
RUN mkdir src \
    && ${GET} https://pythia.org/download/pythia83/pythia8${PYTHIA8_VERSION}.tgz\
    | ${UNPACK_TO_SRC} \
    && cd src \
    && ./configure --enable-shared --prefix=${PREFIX} \
    && make -j$(nproc) install \
    && cd .. \
    && rm -rf src

# nlohmann's JSON
RUN mkdir src \
    && ${GET} https://github.com/nlohmann/json/archive/refs/tags/v${JSON_VERSION}.tar.gz \
    | ${UNPACK_TO_SRC} \
    && cmake -B build -S src -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DJSON_BuildTests=OFF \
    && cmake --build build -- install \
    && rm -rf build src

# ROOT
RUN mkdir src \
    && ${GET} https://root.cern/download/root_v${ROOT_VERSION}.source.tar.gz \
    | ${UNPACK_TO_SRC} \
    && cmake -B build -S src -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=17 \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -Dfail-on-missing=ON \
    -Dgminimal=ON \
    -Dgdml=ON \
    -Dopengl=ON \
    -Dpyroot=ON \
    -Droot7=ON \
    && cmake --build build -- install \
    && rm -rf build src

# environment variables needed to find ROOT libraries
ENV LD_LIBRARY_PATH /usr/local/lib
ENV PYTHON_PATH /usr/local/lib

# podio
RUN mkdir src \
    && ${GET} https://github.com/AIDASoft/podio/archive/refs/tags/v${PODIO_VERSION}.tar.gz \
    | ${UNPACK_TO_SRC} \
    && cmake -B build -S src -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -DBUILD_TESTING=OFF \
    -USE_EXTERNAL_CATCH2=OFF \
    && cmake --build build -- install \
    && rm -rf build src

# EDM4hep
RUN pip3 install jinja2 pyyaml \
    && mkdir src \
    && ${GET} https://github.com/key4hep/EDM4hep/archive/refs/tags/v${EDM4HEP_VERSION}.tar.gz \
    | ${UNPACK_TO_SRC} \
    && cmake -B build -S src -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -DBUILD_TESTING=OFF \
    -DUSE_EXTERNAL_CATCH2=OFF \
    && cmake --build build -- install \
    && rm -rf build src

# DD4hep
# requires Geant4 and ROOT and must come last
RUN mkdir src \
    && ${GET} https://github.com/AIDASoft/DD4hep/archive/v${DD4HEP_VERSION}.tar.gz \
    | ${UNPACK_TO_SRC} \
    && cmake -B build -S src -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=17 \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -DCMAKE_PREFIX_PATH=${PREFIX} \
    -DBUILD_TESTING=OFF \
    -DDD4HEP_BUILD_PACKAGES="DDG4 DDDetectors DDRec UtilityApps" \
    -DDD4HEP_IGNORE_GEANT4_TLS=ON \
    -DDD4HEP_USE_GEANT4=ON \
    -DDD4HEP_USE_XERCESC=ON \
    -DDD4HEP_USE_EDM4HEP=ON \
    && cmake --build build -- install \
    && rm -rf build src

# Onnx (download of tar.gz does not work out of the box, since the build.sh script requires a git repository)
RUN git clone https://github.com/microsoft/onnxruntime src \
    && (cd src && git checkout v${ONNXRUNTIME_VERSION}) \
    && ./src/build.sh \
    --config MinSizeRel \
    --build_shared_lib \
    --build_dir build \
    --skip_tests \
    && cmake --build build/MinSizeRel -- -j install \
    && rm -rf build src

RUN wget https://raw.githubusercontent.com/acts-project/machines/master/ubuntu2004/download_geant4_data.sh \
    -O /usr/local/bin/download_geant4_data.sh
RUN chmod +x /usr/local/bin/download_geant4_data.sh

# cugraph
RUN mkdir src \
    && ${GET} https://github.com/rapidsai/cugraph/archive/refs/tags/v22.02.00.tar.gz \
    | ${UNPACK_TO_SRC} \
    && cmake -B build -S src/cpp -GNinja \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_CXX_STANDARD=17 \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -DCMAKE_CUDA_ARCHITECTURES=${CUDA_ARCH} \
    -DBUILD_TESTS=OFF \
    -DBUILD_CUGRAPH_MG_TESTS=OFF \
    && cmake --build build -- install \
    && rm -rf build src

# Faiss for fast similarity search
RUN mkdir src \
    && ${GET} https://github.com/facebookresearch/faiss/archive/refs/tags/v1.7.4.tar.gz \
    | ${UNPACK_TO_SRC} \
    && cd src && mkdir build && cd build \
    && cmake .. -DFAISS_ENABLE_GPU=ON -DFAISS_ENABLE_PYTHON=ON \
    -DFAISS_ENABLE_C_API=ON \
    -DCMAKE_CUDA_ARCHITECTURES="60-real;70-real;75-real;80;86" \
    -DPython_EXECUTABLE=/usr/bin/python -DPython_LIBRARIES=/usr/lib/python3.8 \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    && make -j faiss && make -j swigfaiss \
    && cd faiss/python && pip3 install . \
    && cd ../.. && make install && cd .. \
    && rm -rf src

# Install grpc
RUN mkdir src_grpc \
    && git clone --recurse-submodules -b v1.49.1 --depth 1 https://github.com/grpc/grpc src_grpc\
    && cmake -B build -S src_grpc -DgRPC_INSTALL=ON \
    -DgRPC_BUILD_TESTS=OFF \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -DCMAKE_BUILD_TYPE=Release \
    && cmake --build build --target install -- -j20 \
    && rm -rf src_grpc build

# libtorch (unzip cannot be used in a pipe...)
ENV LIBTORCH_URL_GPU https://download.pytorch.org/libtorch/cu116/libtorch-cxx11-abi-shared-with-deps-1.13.1%2Bcu116.zip
# ENV LIBTORCH_URL_CPU https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.0.1%2Bcpu.zip

RUN ${GET} --output libtorch.zip ${LIBTORCH_URL_GPU} \
    && unzip libtorch.zip \
    && rsync -ruv libtorch/ ${PREFIX} \
    && rm -rf libtorch*

# Install Torch scatter
RUN rm -rf src && mkdir src \
    && ${GET} https://github.com/rusty1s/pytorch_scatter/archive/refs/tags/2.0.9.tar.gz \
    | ${UNPACK_TO_SRC} \
    && cmake -B build -S src -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=17 \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -DWITH_CUDA=ON \
    -DCMAKE_CUDA_FLAGS=-D__CUDA_NO_HALF_CONVERSIONS__ \
    -DCMAKE_CUDA_ARCHITECTURES=${CUDA_ARCH} \
    && cmake --build build -- install \
    && rm -rf build src

# Install triton client
RUN git clone https://github.com/triton-inference-server/client.git \
    && cd client && mkdir build && cd build \
    && cmake ../src/c++ -DTRITON_ENABLE_CC_HTTP=OFF \
    -DTRITON_ENABLE_CC_GRPC=ON \
    -DCMAKE_PREFIX_PATH="${PREFIX}/lib64/cmake;${PREFIX}/lib/cmake" \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -DTRITON_USE_THIRD_PARTY=OFF  \
    -DTRITON_ENABLE_GPU=ON \
    -DTRITON_ENABLE_PERF_ANALYZER=ON \
    -DTRITON_ENABLE_PERF_ANALYZER_C_API=ON \
    -DCMAKE_CXX_STANDARD=17 \
    && make -j20 && make install \
    && cd ../.. && rm -rf client

RUN apt-get clean -y && rm -rf /var/lib/apt/lists/* && rm -rf /tmp/*  
WORKDIR /workspace

